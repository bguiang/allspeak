{"version":3,"sources":["logo.svg","styles.js","component/Navbar.js","component/Main.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","container","padding","background","navbar","paddingTop","paddingBottom","navbarTitle","margin","color","mainContainer","flex","display","main","height","chat","flexDirection","chatEntry","chatArea","overflow","chatField","users","paddingLeft","paddingRight","width","userList","messageContainer","messageSenderIconContainer","justifyContent","alignItems","messageSenderIcon","lineHeight","borderRadius","fontWeight","fontSize","messageContent","messageIdentifier","messageSender","messageTimeStamp","marginLeft","fontStyle","user","userIcon","username","Navbar","classes","Container","component","maxWidth","className","Main","useState","setUsername","language","setLanguage","loginFailedMessage","setLoginFailedMessage","subscription","setSubscription","usernameError","setUsernameError","availableLanguages","setAvailableLanguages","messages","setMessages","text","setText","setUsers","userColors","setUserColors","client","setClient","loading","setLoading","getAvailableLanguages","a","console","log","axios","get","response","data","useEffect","Client","brokerURL","connectHeaders","debug","str","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","isValidated","isValid","validator","isEmpty","isAlphanumeric","ignore","isLength","min","max","onMessageReceived","payload","message","JSON","parse","body","userUpdateReceived","activeUsers","userColorMap","i","length","beforeConnect","frame","onConnect","languageSubscription","subscribe","publish","destination","stringify","sender","type","onStompError","headers","handleSubmit","event","preventDefault","activate","containerRef","useRef","current","element","scroll","top","scrollHeight","left","behavior","messageList","map","index","style","content","backgroundColor","charAt","time","usersList","userElement","Card","CardContent","ref","onSubmit","chatMessage","moment","calendar","TextField","id","label","multiline","rows","defaultValue","value","variant","onChange","target","Button","paper","cartHeaderTitle","form","noValidate","required","fullWidth","name","onKeyPress","e","key","autoFocus","helperText","error","FormControl","InputLabel","Select","labelId","MenuItem","code","onClick","submit","Typography","baseTheme","createTheme","palette","primary","purple","secondary","green","App","ThemeProvider","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c22d367.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\n// style hook\r\n// uses the theme provider https://material-ui.com/customization/theming/\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    padding: 0,\r\n  },\r\n  background: {\r\n    background: \"#1f1A24\",\r\n  },\r\n  navbar: {\r\n    paddingTop: 50,\r\n    paddingBottom: 20,\r\n  },\r\n  navbarTitle: {\r\n    margin: 0,\r\n    padding: 0,\r\n    color: \"white\",\r\n  },\r\n  mainContainer: {\r\n    flex: 1,\r\n    display: \"flex\",\r\n  },\r\n  main: {\r\n    flex: 1,\r\n    display: \"flex\",\r\n    height: 500,\r\n  },\r\n  chat: {\r\n    flex: 1,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  chatEntry: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n  },\r\n  chatArea: {\r\n    flex: 1,\r\n    // overflow: \"scroll\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column-reverse\",\r\n  },\r\n  chatField: {\r\n    flex: 1,\r\n  },\r\n  users: {\r\n    paddingLeft: 5,\r\n    paddingRight: 5,\r\n    width: 270,\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    overflow: \"auto\",\r\n  },\r\n  userList: {\r\n    flex: 1,\r\n  },\r\n  messageContainer: {\r\n    display: \"flex\",\r\n  },\r\n  messageSenderIconContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    padding: 5,\r\n  },\r\n  messageSenderIcon: {\r\n    lineHeight: 0,\r\n    width: 0,\r\n    padding: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.2em\",\r\n  },\r\n  messageContent: {\r\n    flex: 1,\r\n    padding: 5,\r\n  },\r\n  messageIdentifier: {\r\n    display: \"flex\",\r\n  },\r\n  messageSender: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  messageTimeStamp: {\r\n    color: \"#808080\",\r\n    marginLeft: 5,\r\n    fontStyle: \"italic\",\r\n  },\r\n\r\n  user: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  userIcon: {\r\n    lineHeight: 0,\r\n    width: 0,\r\n    padding: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontWeight: \"bold\",\r\n    fontSize: \"1.2em\",\r\n  },\r\n  username: {\r\n    flex: 1,\r\n    fontWeight: \"bold\",\r\n    padding: 5,\r\n  },\r\n}));\r\n\r\nexport default useStyles;\r\n","import React from \"react\";\r\nimport useStyles from \"../styles\";\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  Card,\r\n  Paper,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\n\r\nconst Navbar = () => {\r\n  let classes = useStyles();\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"md\" classes={classes.mainContainer}>\r\n      <div className={classes.navbar}>\r\n        <h1 className={classes.navbarTitle}>AllSpeak</h1>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  Container,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  InputLabel,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  Card,\r\n  Paper,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\nimport validator from \"validator\";\r\nimport useStyles from \"../styles\";\r\nimport axios from \"axios\";\r\nimport { Client, Message } from \"@stomp/stompjs\";\r\nimport moment from \"moment\";\r\n\r\nconst Main = () => {\r\n  let classes = useStyles();\r\n  const [username, setUsername] = useState(\"\");\r\n  const [serverUsername, setServerUsername] = useState(\"\");\r\n  const [language, setLanguage] = useState(\"en\");\r\n  const [loginFailedMessage, setLoginFailedMessage] = useState(\"\");\r\n  const [subscription, setSubscription] = useState(null);\r\n\r\n  const [usernameError, setUsernameError] = useState(\"\");\r\n  const [availableLanguages, setAvailableLanguages] = useState([]);\r\n  const [messages, setMessages] = useState([]);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const [users, setUsers] = useState([]);\r\n  const [userColors, setUserColors] = useState({});\r\n  const [client, setClient] = useState({});\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getAvailableLanguages = async () => {\r\n    try {\r\n      console.log(\"getting languiages...\");\r\n      const response = await axios.get(\"/languages\");\r\n      console.log(\"Languages\");\r\n      console.log(response.data);\r\n      setAvailableLanguages(response.data);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getAvailableLanguages();\r\n    setClient(\r\n      new Client({\r\n        // Use WSS when deploying to Heroku. Also need to use the exact domain name\r\n        brokerURL: \"wss://localhost:8080/allspeak\",\r\n        // Use WS when testing locally\r\n        // brokerURL: \"ws://localhost:8080/allspeak\",\r\n        connectHeaders: {},\r\n        debug: function (str) {\r\n          console.log(\"STOMP_CLIENT: \" + str);\r\n        },\r\n        reconnectDelay: 5000,\r\n        heartbeatIncoming: 4000,\r\n        heartbeatOutgoing: 4000,\r\n      })\r\n    );\r\n  }, []);\r\n\r\n  const isValidated = () => {\r\n    let isValid = true;\r\n\r\n    // Reset Errors\r\n    setUsernameError(\"\");\r\n\r\n    // Username can't be empty\r\n    if (validator.isEmpty(username)) {\r\n      setUsernameError(\"Please enter a username\");\r\n      isValid = false;\r\n    }\r\n    // Username must be alphanumeric\r\n    else if (\r\n      !validator.isAlphanumeric(username, \"en-US\", { ignore: \" \" }) ||\r\n      !validator.isLength(username, { min: 1, max: 20 }) ||\r\n      !validator.isAlphanumeric(username[0])\r\n    ) {\r\n      setUsernameError(\r\n        \"Username must be 1-20 characters long and contain only letters, numbers, and spaces and start with a letter or number\"\r\n      );\r\n      isValid = false;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  // TODO: handle different message types (CHAT, CONNECT, DISCONNECT)\r\n  // CONNECT and DISCONNECT will come from public subscription\r\n  // CHAT messages will come from language subscription\r\n  const onMessageReceived = (payload) => {\r\n    const message = JSON.parse(payload.body);\r\n    console.log(\"Message Received\");\r\n    console.log(message);\r\n    setMessages((messages) => [...messages, message]);\r\n  };\r\n\r\n  const userUpdateReceived = (payload) => {\r\n    const activeUsers = JSON.parse(payload.body);\r\n    console.log(\"User List Update Received\");\r\n    console.log(activeUsers);\r\n    setUsers(activeUsers);\r\n\r\n    const userColorMap = {};\r\n    for (var i = 0; i < activeUsers.length; i++) {\r\n      userColorMap[activeUsers[i].username] = activeUsers[i].color;\r\n    }\r\n    setUserColors(userColorMap);\r\n  };\r\n\r\n  client.beforeConnect = function (frame) {\r\n    console.log(\"Client starting to connect...\");\r\n  };\r\n\r\n  client.onConnect = function (frame) {\r\n    console.log(\"Client connected\");\r\n    // Do something, all subscribes must be done is this callback\r\n    // This is needed because this will be executed after a (re)connect\r\n\r\n    // Subscribe to the chosen language\r\n    // Client.subscribe() returns an object that contains the subscription id \"id\" and a method unsubscribe()\r\n    var languageSubscription = client.subscribe(\r\n      \"/topic/\" + language,\r\n      onMessageReceived\r\n    );\r\n\r\n    var publicSubscription = client.subscribe(\r\n      \"/topic/public\",\r\n      onMessageReceived\r\n    );\r\n\r\n    var usersSubscription = client.subscribe(\r\n      \"/topic/users\",\r\n      userUpdateReceived\r\n    );\r\n\r\n    setSubscription(languageSubscription);\r\n\r\n    // Send message that user connected\r\n    client.publish({\r\n      destination: \"/app/chat.newUser\",\r\n      body: JSON.stringify({ sender: username, type: \"CONNECT\" }),\r\n    });\r\n  };\r\n\r\n  client.onStompError = function (frame) {\r\n    // Will be invoked in case of error encountered at Broker\r\n    // Bad login/passcode typically will cause an error\r\n    // Complaint brokers will set `message` header with a brief message. Body may contain details.\r\n    // Compliant brokers will terminate the connection after any error\r\n    console.log(\"Broker reported error: \" + frame.headers[\"message\"]);\r\n    console.log(\"Additional details: \" + frame.body);\r\n  };\r\n\r\n  const handleLanguageChange = (event) => {\r\n    setLanguage(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    setLoginFailedMessage(\"\");\r\n    if (isValidated()) {\r\n      // const isLoginSuccessful = await login(username, password);\r\n      // if (!isLoginSuccessful)\r\n      //   setLoginFailedMessage(\"Incorrect username and/or password\");\r\n      client.activate();\r\n      setLoading(true);\r\n    } else {\r\n    }\r\n  };\r\n\r\n  const sendMessage = (event) => {\r\n    event.preventDefault();\r\n    if (text) {\r\n      const chatMessage = {\r\n        sender: username,\r\n        content: text,\r\n        type: \"CHAT\",\r\n        time: moment().calendar(),\r\n      };\r\n      client.publish({\r\n        destination: \"/app/chat.send\",\r\n        body: JSON.stringify(chatMessage),\r\n      });\r\n\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  const containerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (containerRef && containerRef.current) {\r\n      const element = containerRef.current;\r\n      element.scroll({\r\n        top: element.scrollHeight,\r\n        left: 0,\r\n        behavior: \"smooth\",\r\n      });\r\n    }\r\n  }, [containerRef, messages]);\r\n\r\n  const messageList = messages.map((message, index) => (\r\n    <div key={index} style={{ padding: 5 }}>\r\n      {message.type === \"CONNECT\" || message.type === \"DISCONNECT\" ? (\r\n        <div style={{ fontStyle: \"italic\" }}>{message.content}</div>\r\n      ) : null}\r\n      {message.type === \"CHAT\" ? (\r\n        <div className={classes.messageContainer}>\r\n          <div className={classes.messageSenderIconContainer}>\r\n            <div\r\n              className={classes.messageSenderIcon}\r\n              style={{ backgroundColor: userColors[message.sender] }}\r\n            >\r\n              {message.sender.charAt(0)}\r\n            </div>\r\n          </div>\r\n          <div className={classes.messageContent}>\r\n            <div className={classes.messageIdentifier}>\r\n              <div className={classes.messageSender}>{message.sender}</div>\r\n              <div className={classes.messageTimeStamp}>{message.time}</div>\r\n            </div>\r\n            <div>{message.content}</div>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  ));\r\n\r\n  const usersList = users.map((userElement, index) => (\r\n    <div key={index} style={{ padding: 5 }}>\r\n      <div className={classes.user}>\r\n        <div\r\n          className={classes.userIcon}\r\n          style={{ backgroundColor: userColors[userElement.username] }}\r\n        >\r\n          {userElement.username.charAt(0)}\r\n        </div>\r\n        <div className={classes.username}>{userElement.username}</div>\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  const handleTextChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  if (subscription) {\r\n    return (\r\n      <Container component=\"main\" maxWidth=\"md\" classes={classes.mainContainer}>\r\n        <Card classes={classes.mainContainer}>\r\n          <CardContent className={classes.main}>\r\n            <div className={classes.chat}>\r\n              <div ref={containerRef} className={classes.chatArea}>\r\n                {messageList}\r\n              </div>\r\n              <div>\r\n                <form className={classes.chatEntry} onSubmit={sendMessage}>\r\n                  <TextField\r\n                    id=\"filled-multiline-static\"\r\n                    className={classes.chatField}\r\n                    label=\"Message\"\r\n                    multiline\r\n                    rows={3}\r\n                    defaultValue=\"\"\r\n                    value={text}\r\n                    variant=\"filled\"\r\n                    onChange={handleTextChange}\r\n                  />\r\n                  <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                    Submit\r\n                  </Button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n\r\n            <div className={classes.users}>\r\n              <h4>Users</h4>\r\n              <div className={classes.userList}>{usersList}</div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <div className={classes.paper}>\r\n        <h2 className={classes.cartHeaderTitle}>Login</h2>\r\n        <form className={classes.form} noValidate>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"username1\"\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            onChange={(event) => {\r\n              setUsername(event.target.value);\r\n            }}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                console.log(\"Enter key pressed\");\r\n                // write your functionality here\r\n              }\r\n            }}\r\n            autoFocus\r\n            helperText={usernameError}\r\n            error={usernameError ? true : false}\r\n          />\r\n          {availableLanguages.length > 0 ? (\r\n            <FormControl fullWidth>\r\n              <InputLabel id=\"demo-simple-select-label\">Language</InputLabel>\r\n              <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={language}\r\n                label=\"Language\"\r\n                onChange={handleLanguageChange}\r\n              >\r\n                {availableLanguages.map((language, index) => (\r\n                  <MenuItem value={language.code} key={language.code}>\r\n                    {language.name}\r\n                  </MenuItem>\r\n                ))}\r\n              </Select>\r\n              <Button\r\n                onClick={handleSubmit}\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                Submit\r\n              </Button>\r\n              {loading ? (\r\n                <Typography variant=\"subtitle2\" className={classes.error}>\r\n                  The server is full. Please try again later\r\n                </Typography>\r\n              ) : null}\r\n              {loginFailedMessage ? (\r\n                <Typography variant=\"subtitle2\" className={classes.error}>\r\n                  {loginFailedMessage}\r\n                </Typography>\r\n              ) : null}\r\n            </FormControl>\r\n          ) : (\r\n            <Typography variant=\"subtitle2\" className={classes.error}>\r\n              The server is full. Try again later\r\n            </Typography>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport purple from \"@material-ui/core/colors/purple\";\nimport green from \"@material-ui/core/colors/green\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Navbar from \"./component/Navbar\";\nimport Main from \"./component/Main\";\n\nconst baseTheme = createTheme({\n  palette: {\n    type: \"dark\",\n    primary: {\n      main: purple[500],\n    },\n    secondary: {\n      main: green[500],\n    },\n    // text: {\n    //   primary: \"#ffffff\",\n    //   secondary: \"#ffffff\",\n    //   // disabled: \"#ffffff\",\n    //   // hint: \"#ffffff\",\n    // },\n  },\n});\n\nfunction App() {\n  return (\n    <Router>\n      <div style={{ background: \"#1f1A24\", margin: 0, padding: 0 }}>\n        <ThemeProvider theme={baseTheme}>\n          <CssBaseline />\n\n          <div\n            style={{\n              width: \"100vw\",\n              height: \"100vh\",\n              display: \"flex\",\n              flexDirection: \"column\",\n            }}\n          >\n            <Navbar />\n            <div\n              style={{\n                flex: 1,\n                display: \"flex\",\n              }}\n            >\n              <Main />\n            </div>\n            {/* <Switch>\n            <Route path=\"/chat\">\n              <Chat />\n            </Route>\n            <Route path=\"/\">\n              <Login />\n            </Route>\n          </Switch> */}\n          </div>\n        </ThemeProvider>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}